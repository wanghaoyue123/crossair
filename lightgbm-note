import lightgbm as lgb
import shap
import numpy as np


def data_split(X, y, weights=[0.8, 0.2], shuffle=True, seed=None):
    rng = np.random.default_rng(seed = seed)
    n = X.shape[0]
    if shuffle:
        perm = rng.permutation(n)
        X, y = X[perm, :], y[perm]
    cw = [0] + list(np.cumsum(weights))
    X_list, y_list = [], []
    for i in range(1, len(cw)):
        n1, n2 = round(cw[i]), round(cw[i-1])
        X_list.append(X[n1:n2, :])
        y_list.append(y[n1:n2])
    return X_list, y_list

def R2(y_pred, y_true, train_mean):
    return 1 - np.linalg.norm(y_pred-y_true)**2 / np.linalg.norm(y_true - train_mean)**2
    


    
if __name__=="__main__":
    

    n, p = 3000, 20
    X = np.random.randn(n, p)
    y = X @ np.random.rand(p) + np.random.rand(n)
    (X_train, X_valid, X_test), (y_train, y_valid, y_test) = data_split(X, y, weights=[0.7, 0.1, 0.2])
    col_names = ["f"+str(i+1) for i in range(p)]
    kwargs = {"feature_name": col_names,
            "categorical_feature": [],
            "free_raw_data": False}

    lgbds_train = lgb.Dataset(X_train, y_train, **kwargs)
    lgbds_valid = lgb.Dataset(X_valid, y_valid, **kwargs)
    lgbds_test = lgb.Dataset(X_test, y_test, **kwargs)

    params = {"boosting_type": "gbdt",
              "objective": "regression",
              "learning_rate": 0.1,
              "max_depth": 10, 
              "lambda_l2": 0.0,
              "lambda_l1": 0.0
              }
    
    evaluation_results = {}
    model = lgb.train(params, lgbds_train, num_boost_round=200, valid_sets=[lgbds_train, lgbds_valid], 
                      callbacks=[lgb.log_evaluation(5), lgb.record_evaluation(evaluation_results), lgb.early_stopping(50)])
    
    y_train_pred, y_valid_pred, y_test_pred = model(X_train), model(X_valid), model(X_test)
    y_train_mean = np.mean(y_train)
    print("Training set R2 = ", R2(y_train_pred, y_train, y_train_mean))
    print("Validation set R2 = ", R2(y_valid_pred, y_valid, y_train_mean))
    print("Testing set R2 = ", R2(y_test_pred, y_test, y_train_mean))
    
    
    
    
